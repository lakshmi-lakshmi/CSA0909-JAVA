class Customer {
    private double balance = 10000;

    public synchronized void withdraw(double amount) {
        System.out.println("Request to withdraw: " + amount);
        if (amount > balance) {
            System.out.println("Insufficient balance. Waiting for deposit...");
            try { wait(); } catch (InterruptedException e) { e.printStackTrace(); }
        }
        balance -= amount;
        System.out.println("Withdrawal successful. New balance: " + balance);
    }

    public synchronized void deposit(double amount) {
        balance += amount;
        System.out.println("Deposited: " + amount + ". Current balance: " + balance);
        notify();
    }
}

public class BankSystem {
    public static void main(String[] args) {
        Customer customer = new Customer();

        new Thread(() -> customer.withdraw(12000)).start();
        
        // Simulate delay before deposit
        new Thread(() -> {
            try { Thread.sleep(2000); } catch (InterruptedException e) { e.printStackTrace(); }
            customer.deposit(3000);
        }).start();
    }
}
